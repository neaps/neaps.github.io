{"version":3,"sources":["webpack:///./src/pages/compare.js","webpack:///./src/components/tide-chart.js"],"names":["TideStation","styled","div","ComparePage","data","title","allNoaaStation","nodes","map","station","key","id","info","stations","name","state","TideChartToggle","button","TideChartLabel","span","fontsBlack","join","props","color","background","TideChartItem","TideChartLegend","colors","primary","dark","secondary","highlight","TideChart","useState","chartData","setChartData","isExpanded","setIsExpanded","observations","forEach","observation","push","time","Date","t","getTime","value","parseFloat","v","useEffect","tideStationPrediction","tidePrediction","harmonics","HarmonicConstituents","phaseKey","results","levels","predictions","prediction","now","neapsPrediction","getWaterLevelAtTime","noaa","level","datum","datums","padding","top","bottom","left","right","height","crossAxis","style","tickLabels","fill","dependentAxis","label","interpolation","strokeWidth","stroke","x","y","onClick","event","preventDefault","aria-expanded","aria-controls","index","toGMTString","Math","round"],"mappings":"8KAOMA,E,UAAcC,QAAOC,IAAV,oDA8BFC,UA1BK,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OAClB,kBAAC,IAAD,CAAQC,MAAM,WACZ,kBAAC,IAAD,KACE,kKAIA,kBAAC,IAAD,MACCD,EAAKE,eAAeC,MAAMC,KAAI,SAAAC,GAAO,OACpC,kBAACT,EAAD,CAAaU,IAAKD,EAAQE,IACxB,4BACGF,EAAQG,KAAKC,SAAS,GAAGC,KACzBL,EAAQG,KAAKC,SAAS,GAAGE,OACxB,oCACG,KACAN,EAAQG,KAAKC,SAAS,GAAGE,QAIhC,kBAAC,IAAD,CAAWN,QAASA,Y,wNCtBxBO,EAAkBf,UAAOgB,OAAV,wOAafC,EAAiBjB,UAAOkB,KAAV,mHAGHC,IAAWC,KAAK,OAC7B,SAAAC,GAAK,OAAIA,EAAMC,OAAN,UAAyBD,EAAMC,MAA/B,OACT,SAAAD,GAAK,OAAIA,EAAME,YAAN,eAAmCF,EAAME,WAAzC,OAGPC,EAAgBxB,UAAOC,IAAV,8DA6HbwB,EAAkB,kBACtB,2BACE,kBAACR,EAAD,CAAgBM,WAAW,SAASD,MAAM,QAA1C,gBAGC,KACD,kBAACL,EAAD,CAAgBM,WAAYG,IAAOC,QAAQC,KAAMN,MAAM,QAAvD,qBAGC,KARH,MAQY,IACV,kBAACL,EAAD,CAAgBM,WAAYG,IAAOG,UAAUC,WAA7C,uCATF,MAgBaC,IAzIG,SAAC,GAAiB,IAAfvB,EAAc,EAAdA,QACnB,EAAkCwB,oBAAS,GAApCC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,oBAAS,GAAtCG,EAAP,KAAmBC,EAAnB,KAEMC,EAAe,GA4BrB,OA3BA7B,EAAQ6B,aAAalC,KAAKmC,SAAQ,SAAAC,GAChCF,EAAaG,KAAK,CAChBC,KAAM,IAAIC,KAAKH,EAAYI,GAAGC,UAC9BC,MAAOC,WAAWP,EAAYQ,QAGlCC,qBAAU,WACR,IAAMC,EAAwBC,IAC5B1C,EAAQ2C,UAAUC,qBAClB,CACEC,SAAU,cAGRC,EAAU,GAChB9C,EAAQ+C,OAAOC,YAAYlB,SAAQ,SAAAmB,GACjC,IAAMC,EAAM,IAAIhB,KAAKe,EAAWd,GAC1BgB,EAAkBV,EAAsBW,oBAAoB,CAChEnB,KAAMiB,IAERJ,EAAQd,KAAK,CACXC,KAAMiB,EAAId,UACViB,KAAMf,WAAWW,EAAWV,GAC5BY,gBAAiBA,EAAgBG,WAGrC5B,EAAaoB,KACZ,CAAC9C,EAAQ2C,UAAW3C,EAAQuD,MAAMC,OAAQxD,EAAQ+C,OAAOC,cAE1D,oCACGvB,GACC,oCACE,kBAACT,EAAD,KACE,kBAAC,IAAD,CACEyC,QAAS,CAAEC,IAAK,EAAGC,OAAQ,EAAGC,KAAM,GAAIC,MAAO,IAC/CC,OAAQ,KAER,kBAAC,IAAD,CACEC,WAAS,EACTC,MAAO,CACLC,WAAY,CAAEC,KAAM,WAGxB,kBAAC,IAAD,CAAaC,eAAa,EAACH,MAAO,GAAII,MAAM,WAC5C,kBAAC,IAAD,CACEzE,KAAMkC,EACNwC,cAAc,WACdL,MAAO,CACLrE,KAAM,CACJ2E,YAAa,MACbC,OAAQrD,IAAOG,UAAUC,YAG7BkD,EAAE,OACFC,EAAE,UAEJ,kBAAC,IAAD,CACE9E,KAAM8B,EACN4C,cAAc,WACdL,MAAO,CACLrE,KAAM,CAAE2E,YAAa,MAAOC,OAAQrD,IAAOG,UAAUD,OAEvDoD,EAAE,OACFC,EAAE,SAEJ,kBAAC,IAAD,CACE9E,KAAM8B,EACN4C,cAAc,WACdL,MAAO,CAAErE,KAAM,CAAE2E,YAAa,MAAOC,OAAQ,WAC7CC,EAAE,OACFC,EAAE,sBAKR,kBAAClE,EAAD,CACEmE,QAAS,SAAAC,GACPA,EAAMC,iBACNhD,GAAeD,IAEjBkD,gBAAelD,EACfmD,gBAAA,sBAAqC9E,EAAQE,IAN/C,mBAUCyB,GACC,oCACE,8EACA,kBAAC,IAAD,CAAOzB,GAAE,sBAAwBF,EAAQE,IACvC,+BACE,4BACE,oCACA,+CACA,kDAGJ,+BACGuB,EAAU1B,KAAI,SAACgC,EAAagD,GAAd,OACb,wBAAI9E,IAAG,sBAAwBD,EAAQE,GAAhC,IAAsC6E,GAC3C,4BAAK,IAAI7C,KAAKH,EAAYE,MAAM+C,eAChC,4BAAKjD,EAAYsB,MACjB,4BACG4B,KAAKC,MAAoC,IAA9BnD,EAAYoB,iBAA0B","file":"component---src-pages-compare-js-35af01a618c940950ef0.js","sourcesContent":["import React from 'react'\nimport Layout from '../components/layout/default'\nimport Container from '../components/container'\nimport TideChart, { TideChartLegend } from '../components/tide-chart'\nimport { graphql } from 'gatsby'\nimport styled from '@emotion/styled'\n\nconst TideStation = styled.div`\n  margin-bottom: 50px;\n`\n\nconst ComparePage = ({ data }) => (\n  <Layout title=\"Compare\">\n    <Container>\n      <p>\n        Below are the past three days of tidal predictions made by Neaps, NOAA,\n        plus the actual tidal levels measured by real-world guages.\n      </p>\n      <TideChartLegend />\n      {data.allNoaaStation.nodes.map(station => (\n        <TideStation key={station.id}>\n          <h2>\n            {station.info.stations[0].name}\n            {station.info.stations[0].state && (\n              <>\n                {', '}\n                {station.info.stations[0].state}\n              </>\n            )}\n          </h2>\n          <TideChart station={station} />\n        </TideStation>\n      ))}\n    </Container>\n  </Layout>\n)\n\nexport default ComparePage\n\nexport const query = graphql`\n  {\n    allNoaaStation {\n      nodes {\n        id\n        info {\n          stations {\n            name\n            state\n          }\n        }\n        harmonics {\n          HarmonicConstituents {\n            phase_GMT\n            phase_local\n            amplitude\n            name\n            speed\n          }\n        }\n        datum {\n          datums {\n            name\n            value\n          }\n        }\n        observations {\n          data {\n            t\n            v\n          }\n        }\n        levels {\n          predictions {\n            v\n            t\n          }\n        }\n      }\n    }\n  }\n`\n","import React, { useState, useEffect } from 'react'\nimport tidePrediction from '@neaps/tide-predictor'\nimport { VictoryAxis, VictoryLine, VictoryChart } from 'victory'\nimport styled from '@emotion/styled'\nimport colors from '../style/colors'\nimport Table from './table'\nimport { fontsBlack } from '../style/font-families'\n\nconst TideChartToggle = styled.button`\n  background: transparent;\n  border: 0;\n  margin: 0;\n  padding: 0;\n  cursor: pointer;\n  text-align: left;\n  font-size: 0.8rem;\n  width: 100%;\n  display: block;\n  border-bottom: 1px solid black;\n`\n\nconst TideChartLabel = styled.span`\n  display: inline-block;\n  padding: 0.2rem 0.5rem;\n  font-family: ${fontsBlack.join(', ')};\n  ${props => props.color && `color: ${props.color};`}\n  ${props => props.background && `background: ${props.background};`}\n`\n\nconst TideChartItem = styled.div`\n  width: 66ch;\n  height: 400px;\n`\n\nconst TideChart = ({ station }) => {\n  const [chartData, setChartData] = useState(false)\n  const [isExpanded, setIsExpanded] = useState(false)\n\n  const observations = []\n  station.observations.data.forEach(observation => {\n    observations.push({\n      time: new Date(observation.t).getTime(),\n      value: parseFloat(observation.v)\n    })\n  })\n  useEffect(() => {\n    const tideStationPrediction = tidePrediction(\n      station.harmonics.HarmonicConstituents,\n      {\n        phaseKey: 'phase_GMT'\n      }\n    )\n    const results = []\n    station.levels.predictions.forEach(prediction => {\n      const now = new Date(prediction.t)\n      const neapsPrediction = tideStationPrediction.getWaterLevelAtTime({\n        time: now\n      })\n      results.push({\n        time: now.getTime(),\n        noaa: parseFloat(prediction.v),\n        neapsPrediction: neapsPrediction.level\n      })\n    })\n    setChartData(results)\n  }, [station.harmonics, station.datum.datums, station.levels.predictions])\n  return (\n    <>\n      {chartData && (\n        <>\n          <TideChartItem>\n            <VictoryChart\n              padding={{ top: 0, bottom: 0, left: 50, right: 50 }}\n              height={200}\n            >\n              <VictoryAxis\n                crossAxis\n                style={{\n                  tickLabels: { fill: 'none' }\n                }}\n              />\n              <VictoryAxis dependentAxis style={{}} label=\"Meters\" />\n              <VictoryLine\n                data={observations}\n                interpolation=\"cardinal\"\n                style={{\n                  data: {\n                    strokeWidth: '1px',\n                    stroke: colors.secondary.highlight\n                  }\n                }}\n                x=\"time\"\n                y=\"value\"\n              />\n              <VictoryLine\n                data={chartData}\n                interpolation=\"cardinal\"\n                style={{\n                  data: { strokeWidth: '1px', stroke: colors.secondary.dark }\n                }}\n                x=\"time\"\n                y=\"noaa\"\n              />\n              <VictoryLine\n                data={chartData}\n                interpolation=\"cardinal\"\n                style={{ data: { strokeWidth: '1px', stroke: 'tomato' } }}\n                x=\"time\"\n                y=\"neapsPrediction\"\n              />\n            </VictoryChart>\n          </TideChartItem>\n\n          <TideChartToggle\n            onClick={event => {\n              event.preventDefault()\n              setIsExpanded(!isExpanded)\n            }}\n            aria-expanded={isExpanded}\n            aria-controls={`tide-station-table-${station.id}`}\n          >\n            View chart data\n          </TideChartToggle>\n          {isExpanded && (\n            <>\n              <p>All water levels are in meters and time is UTC.</p>\n              <Table id={`tide-station-table-${station.id}`}>\n                <thead>\n                  <tr>\n                    <th>Time</th>\n                    <th>NOAA prediction</th>\n                    <th>Neaps prediction</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {chartData.map((observation, index) => (\n                    <tr key={`tide-station-table-${station.id}-${index}`}>\n                      <td>{new Date(observation.time).toGMTString()}</td>\n                      <td>{observation.noaa}</td>\n                      <td>\n                        {Math.round(observation.neapsPrediction * 1000) / 1000}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </Table>\n            </>\n          )}\n        </>\n      )}\n    </>\n  )\n}\n\nconst TideChartLegend = () => (\n  <p>\n    <TideChartLabel background=\"tomato\" color=\"#FFF\">\n      Red is Neaps\n    </TideChartLabel>\n    {', '}\n    <TideChartLabel background={colors.primary.dark} color=\"#FFF\">\n      dark blue is NOAA\n    </TideChartLabel>\n    {', '}and{' '}\n    <TideChartLabel background={colors.secondary.highlight}>\n      light blue is observed water levels\n    </TideChartLabel>\n    .\n  </p>\n)\n\nexport default TideChart\nexport { TideChartLabel, TideChartLegend }\n"],"sourceRoot":""}