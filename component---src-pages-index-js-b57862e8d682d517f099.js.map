{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./src/assets/images/logo.png","webpack:///./src/components/tide-chart.js"],"names":["Logo","styled","img","bp","width","marginLeft","marginBottom","IndexPage","data","src","logo","alt","href","title","to","target","rel","station","allNoaaStation","nodes","code","language","module","exports","TideChartToggle","button","TideChartLabel","span","fontsBlack","join","props","color","background","TideChartItem","div","TideChartLegend","colors","primary","dark","secondary","highlight","TideChart","useState","chartData","setChartData","isExpanded","setIsExpanded","observations","forEach","observation","push","time","Date","t","getTime","value","parseFloat","v","useEffect","tideStationPrediction","tidePrediction","harmonics","HarmonicConstituents","phaseKey","results","levels","predictions","prediction","now","neapsPrediction","getWaterLevelAtTime","noaa","level","datum","datums","padding","top","bottom","left","right","height","crossAxis","style","tickLabels","fill","dependentAxis","label","interpolation","strokeWidth","stroke","x","y","onClick","event","preventDefault","aria-expanded","aria-controls","id","map","index","key","toGMTString","Math","round"],"mappings":"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","file":"component---src-pages-index-js-b57862e8d682d517f099.js","sourcesContent":["import React from 'react'\nimport Layout from '../components/layout/default'\nimport Container from '../components/container'\nimport { LeadParagraph, SectionTitle } from '../components/type'\nimport Code from '../components/code'\nimport { graphql, Link } from 'gatsby'\nimport styled from '@emotion/styled'\nimport logo from '../assets/images/logo.png'\nimport bp from '../style/breakpoints'\nimport TideChart, { TideChartLegend } from '../components/tide-chart'\n\nconst Logo = styled.img`\n  float: right;\n  ${bp({\n    width: ['150px', '250px'],\n    marginLeft: [0, '1.5rem'],\n    marginBottom: ['1rem', '1.5rem']\n  })}\n`\n\nconst installCode = `# yarn\nyarn install @neaps/tide-prediction\n\n#npm\nnpm install --save @neaps/tide-prediction`\n\nconst basicUsageCode = `import TidePrediction from \"@neaps/tide-prediction\";\nconst constituents = [\n  {\n    phase_GMT: 98.7,\n    phase_local: 313.7,\n    amplitude: 2.687,\n    name: \"M2\",\n    speed: 28.984104\n  }\n  //....there are usually many, read the docs\n];\n\nconst highLowTides = tidePrediction(constituents, {\n  phaseKey: \"phase_GMT\"\n}).getExtremesPrediction({\n  start: new Date(\"2019-01-01\"),\n  end: new Date(\"2019-01-10\")\n});`\n\nconst IndexPage = ({ data }) => (\n  <Layout>\n    <Container>\n      <Logo src={logo} alt=\"\" />\n      <LeadParagraph>A Javascript tide height predictor.</LeadParagraph>\n\n      <p>\n        Many agencies{' '}\n        <a href=\"https://tidesandcurrents.noaa.gov/web_services_info.html\">\n          like{' '}\n          <abbr title=\"National Oceanic and Atmospheric Administration\">\n            NOAA\n          </abbr>\n        </a>{' '}\n        provide high-quality tide data and prediction services. But these\n        services require online access, and are not available for every country.\n      </p>\n      <p>\n        <strong>Neaps</strong> uses standard algorithims to predict tide levels\n        anywhere that has{' '}\n        <Link to=\"/docs/harmonics\">well-defined harmonic constituents</Link>.\n        This is useful for:\n      </p>\n      <ul>\n        <li>Offline access</li>\n        <li>Faster processing for multiple locations</li>\n        <li>Predicting in areas with no well-built APIs</li>\n      </ul>\n      <SectionTitle>How it compares</SectionTitle>\n      <p>\n        Here's a chart comparing Neaps, NOAA prediction, and actual observed\n        water levels for{' '}\n        <a\n          href=\"https://tidesandcurrents.noaa.gov/map/index.html?id=9413450\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Monterey, California\n        </a>\n        . <Link to=\"/compare\">View other comparisons.</Link>\n      </p>\n      <TideChartLegend />\n      <TideChart station={data.allNoaaStation.nodes[0]} />\n\n      <SectionTitle>Installation</SectionTitle>\n      <p>Install with your favorite package manager.</p>\n      <Code code={installCode} language=\"shell\" />\n      <SectionTitle>Basic Usage</SectionTitle>\n      <Code code={basicUsageCode} language=\"javascript\" />\n    </Container>\n  </Layout>\n)\n\nexport default IndexPage\n\nexport const query = graphql`\n  {\n    allNoaaStation(\n      filter: { info: { stations: { elemMatch: { id: { eq: \"9413450\" } } } } }\n    ) {\n      nodes {\n        id\n        info {\n          stations {\n            name\n            state\n          }\n        }\n        harmonics {\n          HarmonicConstituents {\n            phase_GMT\n            phase_local\n            amplitude\n            name\n            speed\n          }\n        }\n        datum {\n          datums {\n            name\n            value\n          }\n        }\n        observations {\n          data {\n            t\n            v\n          }\n        }\n        levels {\n          predictions {\n            v\n            t\n          }\n        }\n      }\n    }\n  }\n`\n","module.exports = __webpack_public_path__ + \"static/logo-b5866fd5754b047673e6f3995326808f.png\";","import React, { useState, useEffect } from 'react'\nimport tidePrediction from '@neaps/tide-predictor'\nimport { VictoryAxis, VictoryLine, VictoryChart } from 'victory'\nimport styled from '@emotion/styled'\nimport colors from '../style/colors'\nimport Table from './table'\nimport { fontsBlack } from '../style/font-families'\n\nconst TideChartToggle = styled.button`\n  background: transparent;\n  border: 0;\n  margin: 0;\n  padding: 0;\n  cursor: pointer;\n  text-align: left;\n  font-size: 0.8rem;\n  width: 100%;\n  display: block;\n  border-bottom: 1px solid black;\n`\n\nconst TideChartLabel = styled.span`\n  display: inline-block;\n  padding: 0.2rem 0.5rem;\n  font-family: ${fontsBlack.join(', ')};\n  ${props => props.color && `color: ${props.color};`}\n  ${props => props.background && `background: ${props.background};`}\n`\n\nconst TideChartItem = styled.div`\n  width: 66ch;\n  height: 400px;\n`\n\nconst TideChart = ({ station }) => {\n  const [chartData, setChartData] = useState(false)\n  const [isExpanded, setIsExpanded] = useState(false)\n\n  const observations = []\n  station.observations.data.forEach(observation => {\n    observations.push({\n      time: new Date(observation.t).getTime(),\n      value: parseFloat(observation.v)\n    })\n  })\n  useEffect(() => {\n    const tideStationPrediction = tidePrediction(\n      station.harmonics.HarmonicConstituents,\n      {\n        phaseKey: 'phase_GMT'\n      }\n    )\n    const results = []\n    station.levels.predictions.forEach(prediction => {\n      const now = new Date(prediction.t)\n      const neapsPrediction = tideStationPrediction.getWaterLevelAtTime({\n        time: now\n      })\n      results.push({\n        time: now.getTime(),\n        noaa: parseFloat(prediction.v),\n        neapsPrediction: neapsPrediction.level\n      })\n    })\n    setChartData(results)\n  }, [station.harmonics, station.datum.datums, station.levels.predictions])\n  return (\n    <>\n      {chartData && (\n        <>\n          <TideChartItem>\n            <VictoryChart\n              padding={{ top: 0, bottom: 0, left: 50, right: 50 }}\n              height={200}\n            >\n              <VictoryAxis\n                crossAxis\n                style={{\n                  tickLabels: { fill: 'none' }\n                }}\n              />\n              <VictoryAxis dependentAxis style={{}} label=\"Meters\" />\n              <VictoryLine\n                data={observations}\n                interpolation=\"cardinal\"\n                style={{\n                  data: {\n                    strokeWidth: '1px',\n                    stroke: colors.secondary.highlight\n                  }\n                }}\n                x=\"time\"\n                y=\"value\"\n              />\n              <VictoryLine\n                data={chartData}\n                interpolation=\"cardinal\"\n                style={{\n                  data: { strokeWidth: '1px', stroke: colors.secondary.dark }\n                }}\n                x=\"time\"\n                y=\"noaa\"\n              />\n              <VictoryLine\n                data={chartData}\n                interpolation=\"cardinal\"\n                style={{ data: { strokeWidth: '1px', stroke: 'tomato' } }}\n                x=\"time\"\n                y=\"neapsPrediction\"\n              />\n            </VictoryChart>\n          </TideChartItem>\n\n          <TideChartToggle\n            onClick={event => {\n              event.preventDefault()\n              setIsExpanded(!isExpanded)\n            }}\n            aria-expanded={isExpanded}\n            aria-controls={`tide-station-table-${station.id}`}\n          >\n            View chart data\n          </TideChartToggle>\n          {isExpanded && (\n            <>\n              <p>All water levels are in meters and time is UTC.</p>\n              <Table id={`tide-station-table-${station.id}`}>\n                <thead>\n                  <tr>\n                    <th>Time</th>\n                    <th>NOAA prediction</th>\n                    <th>Neaps prediction</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {chartData.map((observation, index) => (\n                    <tr key={`tide-station-table-${station.id}-${index}`}>\n                      <td>{new Date(observation.time).toGMTString()}</td>\n                      <td>{observation.noaa}</td>\n                      <td>\n                        {Math.round(observation.neapsPrediction * 1000) / 1000}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </Table>\n            </>\n          )}\n        </>\n      )}\n    </>\n  )\n}\n\nconst TideChartLegend = () => (\n  <p>\n    <TideChartLabel background=\"tomato\" color=\"#FFF\">\n      Red is Neaps\n    </TideChartLabel>\n    {', '}\n    <TideChartLabel background={colors.primary.dark} color=\"#FFF\">\n      dark blue is NOAA\n    </TideChartLabel>\n    {', '}and{' '}\n    <TideChartLabel background={colors.secondary.highlight}>\n      light blue is observed water levels\n    </TideChartLabel>\n    .\n  </p>\n)\n\nexport default TideChart\nexport { TideChartLabel, TideChartLegend }\n"],"sourceRoot":""}